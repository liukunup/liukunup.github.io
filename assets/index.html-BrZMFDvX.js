import{_ as i,c as a,e as n,o as l}from"./app-Dcft7Xc2.js";const e={};function h(t,s){return l(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="告别-面条式-代码-领域驱动设计-ddd-入门指南" tabindex="-1"><a class="header-anchor" href="#告别-面条式-代码-领域驱动设计-ddd-入门指南"><span><strong>告别“面条式”代码：领域驱动设计（DDD）入门指南</strong></span></a></h2><p>你是否曾面对一个庞大的项目，却感觉业务逻辑像一团乱麻，散落在各个控制器和服务层中？修改一个简单的业务规则，却需要跨越五六个文件，牵一发而动全身？如果你的答案是肯定的，那么领域驱动设计（Domain-Driven Design, 简称 DDD）可能就是你要寻找的答案。</p><h3 id="什么是-ddd-它解决什么问题" tabindex="-1"><a class="header-anchor" href="#什么是-ddd-它解决什么问题"><span>什么是 DDD？它解决什么问题？</span></a></h3><p>DDD 不是一种框架或技术，而是一套<strong>软件开发的方法论和思想体系</strong>。它的核心主张是：<strong>软件系统的结构应该与它所解决的业务领域高度一致。</strong></p><p>想象一下，你在开发一个复杂的电商系统。传统的开发模式可能会让我们不自觉地陷入“数据库驱动设计”的陷阱：我们首先设计数据库表，然后创建对应的实体类，再编写服务层来处理业务逻辑。这种方式导致我们思考的起点是“数据”，而非“业务”。</p><p>结果就是：</p><ul><li><strong>业务逻辑泄露</strong>：本应紧密相关的业务规则，分散在服务层的各个角落。</li><li><strong>代码僵化</strong>：每次业务变更，都需要在多个层面进行修改，测试和维护成本极高。</li><li><strong>沟通障碍</strong>：开发人员用技术术语（如“用户表”、“订单表”），业务人员用业务术语（如“客户”、“购物车”），双方鸡同鸭讲。</li></ul><p>DDD 正是为了解决这些问题而生。它强调<strong>通过通用语言来驱动设计</strong>，让软件成为业务领域的精确映射。</p><h3 id="ddd-的核心-武器库" tabindex="-1"><a class="header-anchor" href="#ddd-的核心-武器库"><span>DDD 的核心“武器库”</span></a></h3><p>要理解 DDD，你需要掌握以下几个核心概念：</p><h4 id="_1-通用语言-ubiquitous-language" tabindex="-1"><a class="header-anchor" href="#_1-通用语言-ubiquitous-language"><span>1. 通用语言（Ubiquitous Language）</span></a></h4><p>这是 DDD 的基石。它要求<strong>开发团队和业务专家使用一套统一的、无歧义的语言</strong>来描述业务。所有文档、代码、对话都应基于此语言。</p><ul><li><strong>坏例子</strong>：<code>userDao.insert(order);</code> （技术术语）</li><li><strong>好例子</strong>：<code>customer.placeOrder(cart);</code> （业务术语） 通用语言确保了所有人对业务的理解是一致的，从源头上减少了误解。</li></ul><h4 id="_2-限界上下文-bounded-context" tabindex="-1"><a class="header-anchor" href="#_2-限界上下文-bounded-context"><span>2. 限界上下文（Bounded Context）</span></a></h4><p>这是 DDD 中最关键的战略模式。一个复杂的领域可以划分为多个<strong>限界上下文</strong>，每个上下文都是一个独立的业务模块，拥有自己明确的边界和独立的通用语言。</p><ul><li><strong>例子</strong>：在电商系统中，“<strong>商品上下文</strong>”和“<strong>订单上下文</strong>”就是两个不同的限界上下文。 <ul><li><strong>商品上下文</strong>中关心的“商品”具有丰富的属性：分类、库存、详情描述等。</li><li><strong>订单上下文</strong>中关心的“商品”可能只是一个快照：商品ID、名称、下单时的价格。 限界上下文通过定义清晰的边界，避免了模型的“污染”，让系统保持高内聚、低耦合。</li></ul></li></ul><h4 id="_3-领域模型的核心构件-战术模式" tabindex="-1"><a class="header-anchor" href="#_3-领域模型的核心构件-战术模式"><span>3. 领域模型的核心构件（战术模式）</span></a></h4><p>在限界上下文内部，我们使用一系列战术模式来构建领域模型。</p><ul><li><strong>实体（Entity）</strong>：具有唯一标识和生命周期的对象。例如 <code>Order</code>（订单），通过 <code>OrderId</code> 来区分，即使订单内容完全相同，两个订单也是不同的。</li><li><strong>值对象（Value Object）</strong>：没有唯一标识，仅通过其属性值来识别的对象。例如 <code>Money</code>（金额），由“数值”和“货币单位”共同定义。两个金额，只要数值和单位相同，它们就是等价的。</li><li><strong>聚合根（Aggregate Root）</strong>：这是<strong>最重要的概念之一</strong>。聚合根是一个实体，它定义了一个<strong>聚合</strong>（一组相关联的实体和值对象的集合）的边界，并作为外部访问聚合的唯一入口。 <ul><li><strong>例子</strong>：<code>Order</code>（订单）是聚合根，它包含了 <code>OrderItem</code>（订单项）的集合。你不能直接修改或访问 <code>OrderItem</code>，必须通过 <code>Order</code> 这个聚合根。这保证了业务规则（如“订单总金额必须大于0”）在聚合内部得到强制维护。</li></ul></li><li><strong>领域服务（Domain Service）</strong>：当某个业务操作不适合放在实体或值对象中时（因为它涉及多个聚合或外部依赖），我们使用领域服务。例如 <code>FundTransferService</code>（资金转账服务），它需要操作“转出账户”和“转入账户”两个聚合。</li><li><strong>领域事件（Domain Event）</strong>：用于表示在领域中发生的、具有业务意义的事情。例如 <code>OrderConfirmedEvent</code>（订单已确认事件）。当订单被确认后，发布这个事件，后续的“发送通知”、“扣减库存”等操作可以监听并处理它，实现系统间的解耦。</li></ul><h3 id="一个简单的代码示例" tabindex="-1"><a class="header-anchor" href="#一个简单的代码示例"><span>一个简单的代码示例</span></a></h3><p>假设我们有一个“注册用户”的业务规则：用户名不能重复。</p><p><strong>没有 DDD 的做法（贫血模型）：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// UserController.java</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RestController</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UserController</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> UserService</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">PostMapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/users</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createUser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RequestBody</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> User </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        userService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createUser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// UserService.java</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Service</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UserService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> UserRepository</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userRepository</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createUser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">User </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 业务逻辑散落在服务层</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userRepository</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">existsByName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RuntimeException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">用户名已存在</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        userRepository</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">save</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 DDD 的做法（富血模型）：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// User 实体作为聚合根</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> User</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> UserId</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 构造函数封装业务规则</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> User</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> UserRepository </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userRepository</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userRepository</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">existsByName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> IllegalArgumentException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">用户名已存在</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UserId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ... 其他业务方法</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 在应用层协调</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Service</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UserApplicationService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> UserRepository</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userRepository</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createUser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 业务逻辑在领域模型中</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        User</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> newUser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> User</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">userName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> userRepository</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        userRepository</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">save</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">newUser</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在 DDD 版本中，“用户名唯一”这个核心业务规则被封装在 <code>User</code> 实体内部，它对自己负责。服务层变得轻薄，只负责协调工作。</p><h3 id="什么时候该用-ddd" tabindex="-1"><a class="header-anchor" href="#什么时候该用-ddd"><span>什么时候该用 DDD？</span></a></h3><p>DDD 非常强大，但并非银弹。它最适合于：</p><ul><li><strong>核心复杂领域</strong>：你的系统核心业务逻辑非常复杂，是公司的核心竞争力。</li><li><strong>长生命周期项目</strong>：项目需要长期迭代和维护。</li><li><strong>团队规模较大</strong>：需要多人协作，并且与业务专家沟通密切。</li></ul><p>对于简单的 CRUD（增删改查）应用，使用 DDD 可能会显得“杀鸡用牛刀”，引入不必要的复杂度。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>领域驱动设计（DDD）是一次思维的转变。它引导我们将关注点从“数据”和“技术”回归到“业务”本身。通过<strong>通用语言、限界上下文和富有行为的领域模型</strong>，我们能构建出更灵活、更健壮、更能响应业务变化的软件系统。</p>`,32)])])}const p=i(e,[["render",h]]),r=JSON.parse('{"path":"/blog/gejvv9zo/","title":"领域驱动设计（DDD）","lang":"zh-CN","frontmatter":{"title":"领域驱动设计（DDD）","tags":["设计模式","学院派"],"createTime":"2025/10/10 08:07:38","permalink":"/blog/gejvv9zo/"},"readingTime":{"minutes":5.62,"words":1687},"git":{"createdTime":1760084536000,"updatedTime":1760084536000,"contributors":[{"name":"刘坤","username":"","email":"liukunup@163.com","commits":1,"avatar":"https://gravatar.com/avatar/93adde9a3709e088c6c4b0bd8763791893e8be4840a992204be1ac5d20e50f0c?d=retro"}]},"filePathRelative":"blog/domain-driven-design.md","headers":[],"categoryList":[]}');export{p as comp,r as data};
